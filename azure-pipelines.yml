trigger:
  - main
  - feature/*

pool:
  vmImage: ubuntu-latest

variables:
  - template: variables-pipelines.yml

stages:
  - stage: Build
    displayName: Stage Build
    #dependsOn: Development
    jobs:
      - job: Download
        displayName: Download Repository job
        steps:
          - task: CopyFilesOverSSH@0
            displayName: Securely copy files to the remote machine
            inputs:
              sshEndpoint: marlonpluasvm1
              targetFolder: $(keySwarmDeploy)_$(serviceSwarm)
      - job: Build
        displayName: Build Container job
        steps:
          - powershell: |
              [xml]$pomXml = Get-Content .\pom.xml
              # artifactId
              Write-Host $pomXml.project.artifactId
              $artifactId=$pomXml.project.artifactId
              Write-Host "##vso[task.setvariable variable=artifactId]$artifactId"
              # version
              Write-Host $pomXml.project.version
              $version=$pomXml.project.version
              Write-Host "##vso[task.setvariable variable=version]$version"
              # packaging
              Write-Host $pomXml.project.packaging
              $packaging=$pomXml.project.packaging
              Write-Host "##vso[task.setvariable variable=packaging]$packaging"
              # nombreImagen
              $nombreImagen=$artifactId
              Write-Host $nombreImagen
              Write-Host "##vso[task.setvariable variable=nombreImagen]$nombreImagen"
              # tagImagen
              if ('$(Build.SourceBranchName)' -eq 'main')
              {
                $tagImagen="latest"
              }
              else
              {
                $tagImagen=$version
              }
              Write-Host $tagImagen
              Write-Host "##vso[task.setvariable variable=tagImagen]$tagImagen"
            displayName: Initializing variables
          - task: Cache@2
            inputs:
              key: 'maven | "$(Agent.OS)" | **/pom.xml'
              restoreKeys: |
                maven | "$(Agent.OS)"
                maven
              path: $(mavenCacheFolder)
            displayName: Cache maven
          - task: Maven@3
            displayName: Generate dependencies
            inputs:
              goals: package
              options: '-Dmaven.test.skip=true'
              publishJUnitResults: false
          - task: Docker@2
            displayName: Login container registry
            inputs:
              containerRegistry: marlonpluasregistry
              command: login
          - script: "docker pull $(hostDockerRegistry)/$(nombreImagen):$(tagImagen)"
            displayName: Pull image for caching
            continueOnError: true # for first build, no cache
          - task: Docker@2
            displayName: Build docker image
            inputs:
              containerRegistry: marlonpluasregistry
              repository: $(nombreImagen)
              command: build
              tags: $(tagImagen)
              arguments: '--build-arg artifactId=$(artifactId) --build-arg version=$(version) --cache-from=$(hostDockerRegistry)/$(nombreImagen):$(tagImagen)'
          - task: Docker@2
            displayName: Push docker image
            inputs:
              containerRegistry: marlonpluasregistry
              repository: $(nombreImagen)
              command: push
              tags: $(tagImagen)

  - stage: Deploy_Test
    displayName: Stage Deploy Test
    dependsOn: Build
    condition: and(succeeded(), eq(variables.branch, 'main2'))
    jobs:
      - job: Deploy
        displayName: Deploy job
        steps:
          - task: SSH@0
            displayName: 'Run shell commands on remote machine'
            inputs:
              sshEndpoint: marlonpluasvm1
              commands: |
                docker service rm $(artifactId)_$(keySwarmDeploy)
                docker stack deploy -c docker-compose.yml $(artifactId)_$(keySwarmDeploy)

  - stage: Deploy_Prod
    displayName: Stage Deploy Prod
    dependsOn: Build
    jobs:
      - job: Deploy
        displayName: Deploy job
        steps:
          - powershell: |
              [xml]$pomXml = Get-Content .\pom.xml
              # artifactId
              Write-Host $pomXml.project.artifactId
              $artifactId=$pomXml.project.artifactId
              Write-Host "##vso[task.setvariable variable=artifactId]$artifactId"
              # version
              Write-Host $pomXml.project.version
              $version=$pomXml.project.version
              Write-Host "##vso[task.setvariable variable=version]$version"
              # packaging
              Write-Host $pomXml.project.packaging
              $packaging=$pomXml.project.packaging
              Write-Host "##vso[task.setvariable variable=packaging]$packaging"
              # nombreImagen
              $nombreImagen=$artifactId
              Write-Host $nombreImagen
              Write-Host "##vso[task.setvariable variable=nombreImagen]$nombreImagen"
              # tagImagen
              if ('$(Build.SourceBranchName)' -eq 'main')
              {
                $tagImagen="latest"
              }
              else
              {
                $tagImagen=$version
              }
              Write-Host $tagImagen
              Write-Host "##vso[task.setvariable variable=tagImagen]$tagImagen"
            displayName: Initializing variables
          - task: SSH@0
            displayName: Validate and remove swarm service
            inputs:
              sshEndpoint: marlonpluasvm1
              commands: |
                docker service rm $(keySwarmDeploy)_$(serviceSwarm)
              failOnStdErr: false
            continueOnError: true
          - task: SSH@0
            displayName: Pull image
            inputs:
              sshEndpoint: marlonpluasvm1
              commands: |
                docker pull $(hostDockerRegistry)/$(nombreImagen):$(tagImagen)
              failOnStdErr: false
          - task: SSH@0
            displayName: Deploy swarm service
            inputs:
              sshEndpoint: marlonpluasvm1
              commands: |
                env NOMBRE_IMAGEN=$(hostDockerRegistry)/$(nombreImagen):$(tagImagen) env REPLICAS=$(numReplicasSwarm) docker stack deploy -c $(keySwarmDeploy)_$(serviceSwarm)/docker-compose.yml $(keySwarmDeploy)