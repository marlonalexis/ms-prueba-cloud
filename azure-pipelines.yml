trigger:
  - main
  - feature/*

pool:
  vmImage: ubuntu-latest

variables:
  - template: variables-pipelines.yml

stages:
  - stage: Development
    displayName: Stage Development
    jobs:
      - job: Maven
        displayName: Maven job
        steps:
          - task: Cache@2
            inputs:
              key: 'maven | "$(Agent.OS)" | **/pom.xml'
              restoreKeys: |
                maven | "$(Agent.OS)"
                maven
              path: $(mavenCacheFolder)
            displayName: Cache maven
          - task: Maven@3
            displayName: Validate maven structure
            inputs:
              goals: validate
              options: '-Dmaven.test.skip=true'
              publishJUnitResults: false
              checkStyleRunAnalysis: true
      - job: Test
        displayName: Test job
        steps:
          - task: Cache@2
            inputs:
              key: 'maven | "$(Agent.OS)" | **/pom.xml'
              restoreKeys: |
                maven | "$(Agent.OS)"
                maven
              path: $(mavenCacheFolder)
            displayName: Cache maven
          - task: SonarCloudPrepare@1
            displayName: Prepare analysis in SonarCloud
            inputs:
              SonarCloud: 'mpluasgu_ms-prueba-cloud'
              organization: 'mpluasgu'
              scannerMode: Other
          - task: Maven@3
            displayName: Unit tests
            inputs:
              goals: verify install
              options: '-Dsonar.projectKey=$(sonarKeyProject)'
              testResultsFiles: '**/TEST-*.xml'
              codeCoverageToolOption: JaCoCo
              codeCoverageRestoreOriginalPomXml: true
              sonarQubeRunAnalysis: true
              isJacocoCoverageReportXML: true
              sqMavenPluginVersionChoice: pom
              checkStyleRunAnalysis: true
          - task: SonarCloudPublish@1
            displayName: Publish the results to the build summary
            inputs:
              pollingTimeoutSec: '300'
          - task: PublishCodeCoverageResults@1
            displayName: Publish code coverage
            inputs:
              summaryFileLocation: '${System.DefaultWorkingDirectory}/**/jacoco.xml'
              reportDirectory: '${System.DefaultWorkingDirectory}/**/'
  - stage: Build
    displayName: Stage Build
    jobs:
      - job: Download
        displayName: Download Repository job
        steps:
          - task: CopyFilesOverSSH@0
            displayName: Securely copy files to the remote machine
            inputs:
              sshEndpoint: marlonpluasvm1
              targetFolder: deploy
      - job: Build
        displayName: Build Container job
        steps:
          - powershell: |
              [xml]$pomXml = Get-Content .\pom.xml
              # artifactId
              Write-Host $pomXml.project.artifactId
              $artifactId=$pomXml.project.artifactId
              Write-Host "##vso[task.setvariable variable=artifactId]$artifactId"
              # version
              Write-Host $pomXml.project.version
              $version=$pomXml.project.version
              Write-Host "##vso[task.setvariable variable=version]$version"
              # packaging
              Write-Host $pomXml.project.packaging
              $packaging=$pomXml.project.packaging
              Write-Host "##vso[task.setvariable variable=packaging]$packaging"
              # nombreImagen
              $nombreImagen=$(artifactId)+":"+$(version)
              Write-Host "##vso[task.setvariable variable=nombreImagen]$nombreImagen"
              Write-Host ${System.DefaultWorkingDirectory}
            displayName: Initializing variables
          - task: Cache@2
            inputs:
              key: 'maven | "$(Agent.OS)" | **/pom.xml'
              restoreKeys: |
                maven | "$(Agent.OS)"
                maven
              path: $(mavenCacheFolder)
            displayName: Cache maven
          - script: mvn install -B -e
          - task: Docker@2
            displayName: Login container registry
            inputs:
              containerRegistry: marlonpluasregistry
              command: login
          - task: Docker@2
            displayName: Build docker image $(nombreImagen)
            inputs:
              containerRegistry: marlonpluasregistry
              repository: $(nombreImagen)
              command: build
              arguments: '--build-arg artifactId=$(artifactId) --build-arg version=$(version)'
          - task: Docker@2
            displayName: Push docker image $(nombreImagen)
            inputs:
              containerRegistry: marlonpluasregistry
              repository: $(nombreImagen)
              command: push