trigger:
  - main
  - feature/*

pool:
  vmImage: ubuntu-latest

variables:
  mavenCacheFolder: $(HOME)/.m2/repository
  branch: $(Build.Repository.Name)
  serviceDeploy1: nginx
  serviceDeploy: nginx_nginx
  sonarKeyProject: mpluasgu_ms-prueba-cloud

stages:
  - stage: Maven
    displayName: Stage Maven
    jobs:
      - job: Maven
        displayName: Maven job
        steps:
          - task: Cache@2
            inputs:
              key: '"funcs" | maven |"$(Agent.OS)" | **/pom.xml'
              restoreKeys: |
              path: $(mavenCacheFolder)
            displayName: Cache Maven local repo

          - task: SonarCloudPrepare@1
            displayName: 'Prepare analysis on SonarCloud'
            inputs:
              SonarCloud: 'mpluasgu_ms-prueba-cloud'
              organization: 'mpluasgu'
              scannerMode: Other

          - task: Maven@3
            displayName: 'Execute Maven goal'
            inputs:
              mavenPomFile: 'pom.xml'
              options: '-Dmaven.test.failure.ignore=true'
              mavenOptions: '-Xmx3072m'
              mavenVersionOption: 'Default'
              publishJUnitResults: true
              mavenAuthenticateFeed: false
              effectivePomSkip: false
              testResultsFiles: '**/TEST-*.xml'
              goals: 'clean verify sonar:sonar -Dsonar.projectKey=$(sonarKeyProject)'

          - task: SonarCloudPublish@1
            displayName: 'Publish results on build summary'
            inputs:
              pollingTimeoutSec: '300'

  - stage: Copy
    displayName: Stage Copy
    jobs:
      - job: Copy
        displayName: Copy job
        steps:
          - task: CopyFilesOverSSH@0
            displayName: 'Securely copy files to the remote machine'
            inputs:
              sshEndpoint: marlonpluasvm1
              targetFolder: deploy

  - stage: Build
    displayName: Build Copy
    jobs:
      - job: Build
        displayName: Build job
        steps:
          - task: Docker@2
            displayName: login
            inputs:
              containerRegistry: marlonpluasregistry
              command: login
          - task: Docker@2
            displayName: build
            inputs:
              containerRegistry: marlonpluasregistry
              repository: prueba
              command: build
              #arguments: '--build-arg artifactId=$artifactId --build-arg version=$version'
          - task: Docker@2
            displayName: push
            inputs:
              containerRegistry: marlonpluasregistry
              repository: prueba
              command: push

  - stage: Deploy_Test
    displayName: Stage Deploy Test
    dependsOn: Build
    condition: and(succeeded(), eq(variables.branch, 'main'))
    jobs:
      - job: Deploy
        displayName: Deploy job
        steps:
          - task: SSH@0
            displayName: 'Run shell commands on remote machine'
            inputs:
              sshEndpoint: marlonpluasvm1
              commands: |
                cd deploy
                docker service rm $(serviceDeploy)
                docker stack deploy -c docker-compose.yml $(serviceDeploy1)

  - stage: Deploy_Prod
    displayName: Stage Deploy Prod
    dependsOn: Build
    jobs:
      - job: Deploy
        displayName: Deploy job
        steps:
          - task: SSH@0
            displayName: 'Run shell commands on remote machine'
            inputs:
              sshEndpoint: marlonpluasvm1
              commands: |
                cd deploy
                docker service rm $(serviceDeploy)
                docker stack deploy -c docker-compose.yml $(serviceDeploy1)

